#!/bin/bash

# Commit message file passed by Git
COMMIT_MSG_FILE=${1}

# Read the first line of the commit message
COMMIT_MSG=$(head -n 1 "${COMMIT_MSG_FILE}")

# Define a regex for semantic commit messages
# - Make scope mandatory for all types except 'docs' and 'chore'
# - Limit scope length to a maximum of 20 characters
# - Keep overall message between 10 and 300 characters
SEMANTIC_REGEX="^(docs|chore)(\([a-zA-Z0-9:_-]{1,20}\))?: .{1,100}$|^(build|ci|style|refactor|feat|fix|test)\([a-zA-Z0-9:_-]{1,20}\)(\!)?: .{1,300}$"

if [[ ! ${COMMIT_MSG} =~ ${SEMANTIC_REGEX} ]]; then
    echo "ERROR: Commit message does not follow the Semantic Commit Message convention."
    echo ""
    echo "Examples of valid commit messages:"
    echo "  feat(parser): add ability to parse arrays"
    echo "  fix(login): handle edge case for password validation"
    echo "  docs: update README with usage examples"
    echo "  chore: update dependencies"
    echo ""
    echo "Please use the format: <type>(<scope>): <description>"
    echo "- Types requiring scope: feat, fix, refactor, test, style, build, ci"
    echo "- Types where scope is optional: docs, chore"
    echo "- Maximum scope length: 20 characters"
    echo "- Commit message length: 10-100 characters"
    exit 1
fi